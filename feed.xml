<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/posts</id>
  <link href="http://blog.url.com/posts"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2020-02-13T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>What I learned today about static assets</title>
    <link rel="alternate" href="http://blog.url.com/posts/wilt-about-static-assets/"/>
    <id>http://blog.url.com/posts/wilt-about-static-assets/</id>
    <published>2020-02-13T01:00:00+01:00</published>
    <updated>2020-02-16T21:19:57+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Mockups shared by the Client’s graphic design agency not always use same graphic assets that the client itself shared with you. Dimensions might vary. Check it before start.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Deploy a Django App with Pipenv</title>
    <link rel="alternate" href="http://blog.url.com/posts/deploy-django-with-pipenv/"/>
    <id>http://blog.url.com/posts/deploy-django-with-pipenv/</id>
    <published>2019-08-22T02:00:00+02:00</published>
    <updated>2019-08-22T17:40:13+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: setup your remote environment with &lt;strong&gt;Pipenv&lt;/strong&gt;; if you don&amp;rsquo;t know how to do that, you might want to
check my &lt;a href="https://davideghezzi.com/posts/install-python-the-right-way/"&gt;post&lt;/a&gt; about it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once saved in a &lt;strong&gt;deploy.sh&lt;/strong&gt; file, the deploy script is thought to be launched from your local system, from the Django
project&amp;rsquo;s root folder, with something like &lt;code&gt;./deploy.sh /path/to/your-key.pem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that, in order to ssh to the server, the script currently requires &lt;code&gt;/path/to/your-key.pem&lt;/code&gt; string as first positional parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;deploy.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span style="color: #999988;font-style: italic"&gt;#!/bin/bash&lt;/span&gt;

&lt;span style="color: #999988;font-style: italic"&gt;# set handy variables&lt;/span&gt;
&lt;span style="color: #008080"&gt;REMOTE&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;ubuntu@ec2-xx-xxx-xxx-x.eu-west-1.compute.amazonaws.com
&lt;span style="color: #008080"&gt;REMOTE_FOLDER&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;/path/to/your/django-app/

&lt;span style="color: #999988;font-style: italic"&gt;# pull latest changes&lt;/span&gt;
ssh &lt;span style="color: #000080"&gt;-i&lt;/span&gt; &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$1&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt; &lt;span style="color: #008080"&gt;$REMOTE&lt;/span&gt; &lt;span style="color: #d14"&gt;"cd &lt;/span&gt;&lt;span style="color: #008080"&gt;$REMOTE_FOLDER&lt;/span&gt;&lt;span style="color: #d14"&gt;; git pull"&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt;

&lt;span style="color: #999988;font-style: italic"&gt;# install dependencies defined in Pipenv file&lt;/span&gt;
ssh &lt;span style="color: #000080"&gt;-i&lt;/span&gt; &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$1&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt; &lt;span style="color: #008080"&gt;$REMOTE&lt;/span&gt; &lt;span style="color: #d14"&gt;"cd &lt;/span&gt;&lt;span style="color: #008080"&gt;$REMOTE_FOLDER&lt;/span&gt;&lt;span style="color: #d14"&gt;; export LC_ALL=C.UTF-8; export LANG=C.UTF-8; /home/ubuntu/.local/bin/pipenv install"&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt;

&lt;span style="color: #999988;font-style: italic"&gt;# run scripts defined in Pipenv file (cannot call manage.py scripts directly due to wrong context and lack of real terminal issues)&lt;/span&gt;
ssh &lt;span style="color: #000080"&gt;-i&lt;/span&gt; &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$1&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt; &lt;span style="color: #008080"&gt;$REMOTE&lt;/span&gt; &lt;span style="color: #d14"&gt;"cd &lt;/span&gt;&lt;span style="color: #008080"&gt;$REMOTE_FOLDER&lt;/span&gt;&lt;span style="color: #d14"&gt;; export LC_ALL=C.UTF-8; export LANG=C.UTF-8; /home/ubuntu/.local/bin/pipenv run migrate"&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt;
ssh &lt;span style="color: #000080"&gt;-i&lt;/span&gt; &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$1&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt; &lt;span style="color: #008080"&gt;$REMOTE&lt;/span&gt; &lt;span style="color: #d14"&gt;"cd &lt;/span&gt;&lt;span style="color: #008080"&gt;$REMOTE_FOLDER&lt;/span&gt;&lt;span style="color: #d14"&gt;; export LC_ALL=C.UTF-8; export LANG=C.UTF-8; /home/ubuntu/.local/bin/pipenv run collectstatic"&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt;

&lt;span style="color: #999988;font-style: italic"&gt;# restart gunicorn and nginx&lt;/span&gt;
ssh &lt;span style="color: #000080"&gt;-i&lt;/span&gt; &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$1&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt; &lt;span style="color: #008080"&gt;$REMOTE&lt;/span&gt; &lt;span style="color: #d14"&gt;"cd &lt;/span&gt;&lt;span style="color: #008080"&gt;$REMOTE_FOLDER&lt;/span&gt;&lt;span style="color: #d14"&gt;; sudo supervisorctl restart guni:gunicorn"&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt;
ssh &lt;span style="color: #000080"&gt;-i&lt;/span&gt; &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$1&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt; &lt;span style="color: #008080"&gt;$REMOTE&lt;/span&gt; &lt;span style="color: #d14"&gt;"cd &lt;/span&gt;&lt;span style="color: #008080"&gt;$REMOTE_FOLDER&lt;/span&gt;&lt;span style="color: #d14"&gt;; sudo service nginx restart"&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The scripts is commented and should be easy to understand.&lt;/p&gt;

&lt;p&gt;In order to launch migrations and to collect static assets, it is important to call &lt;code&gt;manage.py&lt;/code&gt; scripts from within the
virtual environment; for this reason I added a &lt;code&gt;[script]&lt;/code&gt; block to my &lt;strong&gt;Pipfile&lt;/strong&gt;, that I can run from the deploy script.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can then run &lt;code&gt;pipenv run &amp;lt;shortcut name&amp;gt;&lt;/code&gt; in your terminal to run the command in the context of your pipenv virtual
environment even if you have not activated the pipenv shell first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, this will avoid the dreadful error &amp;ldquo;inappropriate ioctl for device&amp;rdquo;, which typically means some code in your
project or its dependencies has replaced one of the process streams (&lt;code&gt;sys.stdin&lt;/code&gt;, &lt;code&gt;sys.stdout&lt;/code&gt; or &lt;code&gt;sys.stderr&lt;/code&gt;)
with an object that isn’t actually hooked up to a terminal, but which pretends that it is. For example,
test runners or build systems often do this (&lt;a href="http://www.pyinvoke.org/faq.html#i-m-getting-ioerror-inappropriate-ioctl-for-device-when-i-run-commands"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pipfile&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span style="color: #000000;font-weight: bold"&gt;[[&lt;/span&gt;&lt;span style="color: #0086B3"&gt;source&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;]]&lt;/span&gt;
name &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"pypi"&lt;/span&gt;
url &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"https://pypi.org/simple"&lt;/span&gt;
verify_ssl &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #0086B3"&gt;true&lt;/span&gt;

&lt;span style="color: #000000;font-weight: bold"&gt;[&lt;/span&gt;scripts]
migrate &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"python pariterequity/manage.py migrate --noinput"&lt;/span&gt;
collectstatic &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"python pariterequity/manage.py collectstatic --noinput"&lt;/span&gt;

&lt;span style="color: #000000;font-weight: bold"&gt;[&lt;/span&gt;dev-packages]

&lt;span style="color: #000000;font-weight: bold"&gt;[&lt;/span&gt;packages]
django &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"*"&lt;/span&gt;
django-storages &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"*"&lt;/span&gt;
boto3 &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"*"&lt;/span&gt;
django-compressor &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"*"&lt;/span&gt;
django-sass-processor &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"*"&lt;/span&gt;
libsass &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"*"&lt;/span&gt;

&lt;span style="color: #000000;font-weight: bold"&gt;[&lt;/span&gt;requires]
python_version &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"3.6.8"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy deploying :)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Perfect aws-cli setup</title>
    <link rel="alternate" href="http://blog.url.com/posts/perfect-aws-cli-setup/"/>
    <id>http://blog.url.com/posts/perfect-aws-cli-setup/</id>
    <published>2019-04-30T02:00:00+02:00</published>
    <updated>2019-04-30T19:09:06+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shameless acknowledgment&lt;/strong&gt;: All the following has been copied and pasted from https://duseev.com/articles/perfect-aws-cli-setup.
I found that article so useful that I wanted to dump it here in case that blog will stop working.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[&amp;hellip;] keep the installation of AWS CLI isolated from everything else.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create &lt;code&gt;/.aws&lt;/code&gt; directory if it does not exist.&lt;/li&gt;
&lt;li&gt;create &lt;code&gt;~/.aws/.python-version&lt;/code&gt; and fiull it with your favorite Python version&lt;/li&gt;
&lt;li&gt;cd into &lt;code&gt;/.aws&lt;/code&gt; and &lt;code&gt;pipenv install awscli&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will create a dedicated virtual environment and install AWS CLI there so that it’s exclusively available only from that place.
Pipenv will know which virtual environment to use in this directory thanks to the &lt;code&gt;Pipfile.lock&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] make a symlink that will redirect any requests to aws command into our dedicated virtual environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create &lt;code&gt;~/.aws/bin/ directory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create &lt;code&gt;~/.aws/bin/aws&lt;/code&gt; file there with the following script inside&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span style="color: #999988;font-style: italic"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;# The line above ensures cross compatibility in MacOS&lt;/span&gt;

&lt;span style="color: #999988;font-style: italic"&gt;# Set ENV variable for PyEnv to know which interpreter to use&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;# This will not work if you no longer have 3.6.5 version in Pyenv!&lt;/span&gt;
&lt;span style="color: #0086B3"&gt;export &lt;/span&gt;&lt;span style="color: #008080"&gt;PYENV_VERSION&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;3.6.5

&lt;span style="color: #999988;font-style: italic"&gt;# Set PIPENV location ENV variable to tell Pipenv where to look for virtual environment.&lt;/span&gt;
&lt;span style="color: #0086B3"&gt;export &lt;/span&gt;&lt;span style="color: #008080"&gt;PIPENV_PIPFILE&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;~/.aws/Pipfile

&lt;span style="color: #999988;font-style: italic"&gt;# When this command is executed following happens:&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;# 1. Pyenv starts and uses shims to look for the pipenv module in the&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;#    3.6.5 installation of Python. Then it starts pipenv&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;# 2. Pipenv reads Pipfile location from environment variable of the&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;#    shell that we just set and finds the aws executable&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;#    in the dedicated virtual evnironment.&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;# 3. We pass all the arguments in our script to aws executable using&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;#    "$@" bash directive.&lt;/span&gt;
pipenv run aws &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$@&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;make the script executable: &lt;code&gt;chmod a+x ~/.aws/bin/aws&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create a symlink to this executable script &lt;code&gt;sudo ln -s ~/.aws/bin/aws /usr/local/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it! The aws executable is now available from any directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;~&lt;span style="color: #008080"&gt;$ &lt;/span&gt;&lt;span style="color: #0086B3"&gt;pwd&lt;/span&gt;
/Users/davide

~&lt;span style="color: #008080"&gt;$ &lt;/span&gt;aws &lt;span style="color: #000080"&gt;--version&lt;/span&gt;
aws-cli/1.16.148 Python/3.6.8 Darwin/18.5.0 botocore/1.12.138
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Install Python the right way</title>
    <link rel="alternate" href="http://blog.url.com/posts/install-python-the-right-way/"/>
    <id>http://blog.url.com/posts/install-python-the-right-way/</id>
    <published>2019-04-24T02:00:00+02:00</published>
    <updated>2019-04-24T15:31:08+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Does this sound familiar?&lt;/p&gt;

&lt;p&gt;&lt;img src="https://imgs.xkcd.com/comics/python_environment_2x.png" alt="Messy Python" /&gt;&lt;/p&gt;

&lt;p&gt;Installing Python for me has always been a pain. There are way too many &amp;ldquo;suggested&amp;rdquo; way to install it, too many strategies to handle different versions and projects&amp;rsquo; dependencies&amp;hellip; virtualenv, pip, pip3, pyenv, pipenv, brew. It&amp;rsquo;s a mess. And if you want your favorite IDE to automatically play along with your installations, well, things get more and more confused.&lt;/p&gt;

&lt;p&gt;Until today!&lt;/p&gt;

&lt;p&gt;I spent a night and a morning fooling around with python versions and virtual environments, until I arrived to the perfect working solution. It&amp;rsquo;s actually a cocktail of well balanced and tasty ingredients:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pyenv: to efficiently install and handle different versions of Python&lt;/li&gt;
&lt;li&gt;pipenv: to isolate projects&amp;rsquo; dependencies&lt;/li&gt;
&lt;li&gt;PyCharm: the definitive IDE for python developers, it will fit perfectly this setup&lt;/li&gt;
&lt;li&gt;some smart tweaks to your &lt;code&gt;~/.profile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;disclaimer: the following setup works on my macbook pro with macOS Mojave 10.14.4 - it has not been tested on different systems or different versions of the same system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;pyenv&lt;/h1&gt;

&lt;p&gt;First thing first: install your next favorite toy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span style="color: #008080"&gt;$ &lt;/span&gt;brew install pyenv
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add &lt;code&gt;pyenv init&lt;/code&gt; to your shell to enable shims and autocompletion&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span style="color: #008080"&gt;$ &lt;/span&gt;&lt;span style="color: #0086B3"&gt;echo&lt;/span&gt; &lt;span style="color: #000080"&gt;-e&lt;/span&gt; &lt;span style="color: #d14"&gt;'if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n  eval "$(pyenv init -)"\nfi'&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.profile
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it. You can now install different Pythons compiling them directly from source&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span style="color: #008080"&gt;$ &lt;/span&gt;pyenv install 2.7.8
&lt;span style="color: #008080"&gt;$ &lt;/span&gt;pyenv install 3.6.8
&lt;span style="color: #008080"&gt;$ &lt;/span&gt;pyenv versions
  system
  2.7.8
&lt;span style="color: #000000;font-weight: bold"&gt;*&lt;/span&gt; 3.6.8 &lt;span style="color: #000000;font-weight: bold"&gt;(&lt;/span&gt;&lt;span style="color: #0086B3"&gt;set &lt;/span&gt;by /Users/davide/.pyenv/version&lt;span style="color: #000000;font-weight: bold"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you&amp;rsquo;ll be able to setup a global version or a specific version to be used in specific folders&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;pyenv global 3.6.8
pyenv &lt;span style="color: #0086B3"&gt;local &lt;/span&gt;2.7.6
&lt;span style="color: #999988;font-style: italic"&gt;# the last cmd creates a .python-version file in the current directory.&lt;/span&gt;
&lt;span style="color: #999988;font-style: italic"&gt;# The local version overrides the global one.&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At &lt;a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md"&gt;this link&lt;/a&gt; you can find a comprehensive pyenv command reference.&lt;/p&gt;

&lt;h1&gt;pipenv&lt;/h1&gt;

&lt;p&gt;The official guides instructs to install pipenv through HomeBrew: &lt;code&gt;brew install pipenv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What worked for me was instead the old fashioned &lt;code&gt;sudo -H pip install -U pipenv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t list pipenv commands and description, you can find them &lt;a href="https://github.com/pypa/pipenv"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;PyCharm&lt;/h1&gt;

&lt;p&gt;PyCharm will automatically try to install the dependencies listed in the Pipfile; but almost surely it will fail.&lt;/p&gt;

&lt;p&gt;Here below some tweaks to make the magic happen:&lt;/p&gt;

&lt;p&gt;First of all add the following to your &lt;code&gt;~/.profile&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span style="color: #999988;font-style: italic"&gt;# Run the following command to find the user base's binary directory:&lt;/span&gt;
&lt;span style="color: #008080"&gt;$ &lt;/span&gt;python &lt;span style="color: #000080"&gt;-m&lt;/span&gt; site &lt;span style="color: #000080"&gt;--user-base&lt;/span&gt;

&lt;span style="color: #999988;font-style: italic"&gt;# A sample output can be&lt;/span&gt;
/Users/davide/.local

&lt;span style="color: #999988;font-style: italic"&gt;# Add bin to this path to receive a string for adding to the ~/.profile file, for example:&lt;/span&gt;
&lt;span style="color: #008080"&gt;$ &lt;/span&gt;&lt;span style="color: #0086B3"&gt;export &lt;/span&gt;&lt;span style="color: #008080"&gt;PATH&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$PATH&lt;/span&gt;&lt;span style="color: #d14"&gt;:Users/jetbrains/.local/bin"&lt;/span&gt;
&lt;span style="color: #008080"&gt;$ &lt;/span&gt;&lt;span style="color: #0086B3"&gt;source&lt;/span&gt; ~/.profile
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can get back to PyCharm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;look for &lt;strong&gt;Project Interpreter&lt;/strong&gt; in the &lt;strong&gt;Preferences&lt;/strong&gt; Panel.&lt;/li&gt;
&lt;li&gt;click on the small gear icon on the right / click on ADD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now here there is a small gotcha that made me crazy spending a ton of time, so pay attention:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I know you want to setup a &lt;strong&gt;Pipenv Environment&lt;/strong&gt;, but STFU, trust me and click on &lt;strong&gt;Virtualenv Environment&lt;/strong&gt; on the left menu.&lt;/li&gt;
&lt;li&gt;Check &lt;strong&gt;Existing Enviroment&lt;/strong&gt; and select the correct pyenv&amp;rsquo;s python installation / click ok&lt;/li&gt;
&lt;li&gt;Now click again on the small gear icon, and this time click on &lt;strong&gt;Pipenv Environment&lt;/strong&gt; on the left menu&lt;/li&gt;
&lt;li&gt;The base interpreter will be available; select it! (at current time, if you don&amp;rsquo;t follow what I wrote here above you won&amp;rsquo;t find it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PyCharm will create the environment using the global (or local) python version set with pyenv.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>EBS extensions, from WTF?! to OMGILUVIT&lt;3</title>
    <link rel="alternate" href="http://blog.url.com/posts/ebs-extension/"/>
    <id>http://blog.url.com/posts/ebs-extension/</id>
    <published>2019-04-17T02:00:00+02:00</published>
    <updated>2019-04-30T19:03:11+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;AWS ElasticBeanstalk is an awesome tool to automate deploy operations.&lt;/p&gt;

&lt;p&gt;Install the cli, checkout the code, and &lt;code&gt;eb deploy&lt;/code&gt; will do the rest; it will setup a nice looking stack including cool stuff like load balancing, auto scaling, containerized virtual instances for your application and DB, security groups, health monitors, notifications, etc…&lt;/p&gt;

&lt;p&gt;Easy? YES. Until you need to tune the underlying deploy pipeline or resources. Let’s say you need a different node version to run in your env because one of your app’s dependencies decided it no longer likes node 6.4, which is currently the default on the &lt;code&gt;Puma with Ruby 2.6 running on 64bit Amazon Linux/2.9.2&lt;/code&gt; MRI; You’ll be in big trouble.&lt;/p&gt;

&lt;p&gt;I spent many hours last night on this, and I feel like sharing my experience might save other people’s precious sleeping hours.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can add AWS Elastic Beanstalk configuration files (.ebextensions) to your web application’s source code to configure your environment and customize the AWS resources that it contains. Configuration files are YAML- or JSON-formatted documents with a .config file extension that you place in a folder named .ebextensions and deploy in your application source bundle.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;AWS EBS docs&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that .ebextensions files are executed in alphabetical order. I was not able to find a complete list of such files, but errors from &lt;code&gt;eb deploy&lt;/code&gt; command contained the files’ name containing the failing commands, so I was able to name them coherently.&lt;/p&gt;

&lt;p&gt;To update or install a specific Node version in an EBS environment, just create a file and put in a &lt;code&gt;.ebextensions&lt;/code&gt; folder in your root.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;e.g, my-app/.ebextensions/app.config&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;files:
  &lt;span style="color: #d14"&gt;"/opt/elasticbeanstalk/hooks/appdeploy/pre/10_nodejs.sh"&lt;/span&gt;:
    mode: &lt;span style="color: #d14"&gt;"000777"&lt;/span&gt;
    owner: &lt;span style="color: #d14"&gt;'root'&lt;/span&gt;
    group: &lt;span style="color: #d14"&gt;'root'&lt;/span&gt;
    content: |
        &lt;span style="color: #999988;font-style: italic"&gt;#!/usr/bin/env bash&lt;/span&gt;

        &lt;span style="color: #0086B3"&gt;.&lt;/span&gt; /opt/elasticbeanstalk/hooks/common.sh

        &lt;span style="color: #0086B3"&gt;set&lt;/span&gt; &lt;span style="color: #000080"&gt;-xe&lt;/span&gt;
        &lt;span style="color: #008080"&gt;EB_NODE_VERSION&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;&lt;span style="color: #d14"&gt;"v8.9.4"&lt;/span&gt;

        &lt;span style="color: #008080"&gt;file&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;&lt;span style="color: #d14"&gt;"/etc/elasticbeanstalk/baking_manifest/node_installed_&lt;/span&gt;&lt;span style="color: #008080"&gt;$EB_NODE_VERSION&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt;
        &lt;span style="color: #000000;font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;[&lt;/span&gt; &lt;span style="color: #000080"&gt;-e&lt;/span&gt; &lt;span style="color: #008080"&gt;$file&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;]&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;then
            &lt;/span&gt;&lt;span style="color: #0086B3"&gt;echo &lt;/span&gt;Node.js has already been installed. Skipping installation.
        &lt;span style="color: #000000;font-weight: bold"&gt;else
            &lt;/span&gt;&lt;span style="color: #008080"&gt;EB_TARBALL_URL&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;$(&lt;/span&gt;/opt/elasticbeanstalk/bin/get-config container &lt;span style="color: #000080"&gt;-k&lt;/span&gt; tarball_url&lt;span style="color: #000000;font-weight: bold"&gt;)&lt;/span&gt;
            &lt;span style="color: #008080"&gt;EB_NODE_INSTALL_DIR&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;$(&lt;/span&gt;/opt/elasticbeanstalk/bin/get-config container &lt;span style="color: #000080"&gt;-k&lt;/span&gt; node_install_dir&lt;span style="color: #000000;font-weight: bold"&gt;)&lt;/span&gt;

            &lt;span style="color: #008080"&gt;MACHINE_TYPE&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;&lt;span style="color: #d14"&gt;`&lt;/span&gt;uname &lt;span style="color: #000080"&gt;-m&lt;/span&gt;&lt;span style="color: #d14"&gt;`&lt;/span&gt;
            &lt;span style="color: #000000;font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;[&lt;/span&gt; &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$MACHINE_TYPE&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"x86_64"&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;]&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;then
                &lt;/span&gt;&lt;span style="color: #008080"&gt;ARCH&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;x64
            &lt;span style="color: #000000;font-weight: bold"&gt;elif&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;[&lt;/span&gt; &lt;span style="color: #d14"&gt;"&lt;/span&gt;&lt;span style="color: #008080"&gt;$MACHINE_TYPE&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #d14"&gt;"i686"&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;]&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;;&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;then
                &lt;/span&gt;&lt;span style="color: #008080"&gt;ARCH&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;x86
            &lt;span style="color: #000000;font-weight: bold"&gt;else
                &lt;/span&gt;&lt;span style="color: #0086B3"&gt;echo&lt;/span&gt; &lt;span style="color: #d14"&gt;"Unknown architecture."&lt;/span&gt;
                &lt;span style="color: #0086B3"&gt;exit &lt;/span&gt;1
            &lt;span style="color: #000000;font-weight: bold"&gt;fi

            &lt;/span&gt;mkdir &lt;span style="color: #000080"&gt;-p&lt;/span&gt; &lt;span style="color: #008080"&gt;$EB_NODE_INSTALL_DIR&lt;/span&gt;
            curl &lt;span style="color: #000080"&gt;-L&lt;/span&gt; https://nodejs.org/dist/&lt;span style="color: #008080"&gt;$EB_NODE_VERSION&lt;/span&gt;/node-&lt;span style="color: #008080"&gt;$EB_NODE_VERSION&lt;/span&gt;&lt;span style="color: #000080"&gt;-linux-&lt;/span&gt;&lt;span style="color: #008080"&gt;$ARCH&lt;/span&gt;.tar.gz | &lt;span style="color: #0086B3"&gt;tar &lt;/span&gt;zxf - &lt;span style="color: #000080"&gt;-C&lt;/span&gt; &lt;span style="color: #008080"&gt;$EB_NODE_INSTALL_DIR&lt;/span&gt;
            ln &lt;span style="color: #000080"&gt;-sf&lt;/span&gt; &lt;span style="color: #008080"&gt;$EB_NODE_INSTALL_DIR&lt;/span&gt;/node-&lt;span style="color: #008080"&gt;$EB_NODE_VERSION&lt;/span&gt;&lt;span style="color: #000080"&gt;-linux-&lt;/span&gt;&lt;span style="color: #008080"&gt;$ARCH&lt;/span&gt;/bin/node /usr/bin/
            ln &lt;span style="color: #000080"&gt;-sf&lt;/span&gt; &lt;span style="color: #008080"&gt;$EB_NODE_INSTALL_DIR&lt;/span&gt;/node-&lt;span style="color: #008080"&gt;$EB_NODE_VERSION&lt;/span&gt;&lt;span style="color: #000080"&gt;-linux-&lt;/span&gt;&lt;span style="color: #008080"&gt;$ARCH&lt;/span&gt;/bin/node-waf /usr/bin/
            ln &lt;span style="color: #000080"&gt;-sf&lt;/span&gt; &lt;span style="color: #008080"&gt;$EB_NODE_INSTALL_DIR&lt;/span&gt;/node-&lt;span style="color: #008080"&gt;$EB_NODE_VERSION&lt;/span&gt;&lt;span style="color: #000080"&gt;-linux-&lt;/span&gt;&lt;span style="color: #008080"&gt;$ARCH&lt;/span&gt;/bin/npm /usr/bin/
            &lt;span style="color: #0086B3"&gt;echo&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;$(&lt;/span&gt;date&lt;span style="color: #000000;font-weight: bold"&gt;)&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #d14"&gt;"/etc/elasticbeanstalk/baking_manifest/node_installed_&lt;/span&gt;&lt;span style="color: #008080"&gt;$EB_NODE_VERSION&lt;/span&gt;&lt;span style="color: #d14"&gt;"&lt;/span&gt;

            rm &lt;span style="color: #000080"&gt;-rf&lt;/span&gt; /home/webapp/.npm/
            rm &lt;span style="color: #000080"&gt;-rf&lt;/span&gt; /var/app/ondeck/node_modules/
            npm cache clean &lt;span style="color: #000080"&gt;--force&lt;/span&gt;
            rm &lt;span style="color: #000080"&gt;-rf&lt;/span&gt; /opt/elasticbeanstalk/support/node-install/node-v6&lt;span style="color: #000000;font-weight: bold"&gt;*&lt;/span&gt;
            rm &lt;span style="color: #000080"&gt;-rf&lt;/span&gt; /opt/elasticbeanstalk/support/node-install/node-v4&lt;span style="color: #000000;font-weight: bold"&gt;*&lt;/span&gt;
        &lt;span style="color: #000000;font-weight: bold"&gt;fi

        &lt;/span&gt;mkdir &lt;span style="color: #000080"&gt;-p&lt;/span&gt; /home/webapp
        chown &lt;span style="color: #000080"&gt;-R&lt;/span&gt; webapp:webapp /home/webapp
        mkdir &lt;span style="color: #000080"&gt;-p&lt;/span&gt; /var/app/support/.npm_global
        npm config &lt;span style="color: #0086B3"&gt;set &lt;/span&gt;prefix /var/app/support/.npm_global
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also the following note, straight from the docs, would have saved me a big headache, if I only would have read it before starting my journey down the ebextensions hole.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TIP: When you are developing or testing new configuration files, launch a clean environment running the default application and deploy to that. Poorly formatted configuration files will cause a new environment launch to fail unrecoverably.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;AWS EBS docs&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same way it is possible to update Bundler to v2 (in case you are trying to deploy a Ruby 2.6 and Rails 5 app to EBS and getting error with Bundler).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;files:
  &lt;span style="color: #999988;font-style: italic"&gt;# Runs before `./10_bundle_install.sh`:&lt;/span&gt;
  &lt;span style="color: #d14"&gt;"/opt/elasticbeanstalk/hooks/appdeploy/pre/09_gem_install_bundler.sh"&lt;/span&gt; :
    mode: &lt;span style="color: #d14"&gt;"000775"&lt;/span&gt;
    owner: root
    group: users
    content: |
      &lt;span style="color: #999988;font-style: italic"&gt;#!/usr/bin/env bash&lt;/span&gt;

      &lt;span style="color: #008080"&gt;EB_APP_STAGING_DIR&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;$(&lt;/span&gt;/opt/elasticbeanstalk/bin/get-config container &lt;span style="color: #000080"&gt;-k&lt;/span&gt; app_staging_dir&lt;span style="color: #000000;font-weight: bold"&gt;)&lt;/span&gt;
      &lt;span style="color: #008080"&gt;EB_SCRIPT_DIR&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt;&lt;span style="color: #000000;font-weight: bold"&gt;$(&lt;/span&gt;/opt/elasticbeanstalk/bin/get-config container &lt;span style="color: #000080"&gt;-k&lt;/span&gt; script_dir&lt;span style="color: #000000;font-weight: bold"&gt;)&lt;/span&gt;
      &lt;span style="color: #999988;font-style: italic"&gt;# Source the application's ruby, i.e. 2.6. Otherwise it will be 2.3, which will&lt;/span&gt;
      &lt;span style="color: #999988;font-style: italic"&gt;# give this error: `bundler requires Ruby version &amp;gt;= 2.3.0`&lt;/span&gt;
      &lt;span style="color: #0086B3"&gt;.&lt;/span&gt; &lt;span style="color: #008080"&gt;$EB_SCRIPT_DIR&lt;/span&gt;/use-app-ruby.sh

      &lt;span style="color: #0086B3"&gt;cd&lt;/span&gt; &lt;span style="color: #008080"&gt;$EB_APP_STAGING_DIR&lt;/span&gt;
      &lt;span style="color: #0086B3"&gt;echo&lt;/span&gt; &lt;span style="color: #d14"&gt;"Installing compatible bundler"&lt;/span&gt;
      gem install bundler &lt;span style="color: #000080"&gt;-v&lt;/span&gt; 2.0.1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>I was born</title>
    <link rel="alternate" href="http://blog.url.com/posts/i-was-born/"/>
    <id>http://blog.url.com/posts/i-was-born/</id>
    <published>1986-08-01T02:00:00+02:00</published>
    <updated>2019-04-24T10:32:51+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It was a friday afternoon, I born ready for the weekend.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span style="background-color: #f8f8f8"&gt;me&lt;/span&gt; &lt;span style="color: #000000;font-weight: bold"&gt;=&lt;/span&gt; &lt;span style="color: #008080"&gt;Person&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;.&lt;/span&gt;&lt;span style="color: #990000;font-weight: bold"&gt;new&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;(&lt;/span&gt;&lt;span style="color: #990073"&gt;first_name: &lt;/span&gt;&lt;span style="color: #d14"&gt;'Davide'&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;,&lt;/span&gt; &lt;span style="color: #990073"&gt;last_name: &lt;/span&gt;&lt;span style="color: #d14"&gt;'Ghezzi'&lt;/span&gt;&lt;span style="background-color: #f8f8f8"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
</feed>
